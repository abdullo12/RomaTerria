const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const { spawn } = require('child_process');
const cors = require('cors');

const app = express();
const PORT = 3003;

// Middleware
app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, `video-${uniqueSuffix}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('video/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
    }
  }
});

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
const ensureDirectories = async () => {
  try {
    await fs.mkdir('uploads', { recursive: true });
    await fs.mkdir('frames', { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python-—Å–∫—Ä–∏–ø—Ç–∞
const extractFrames = async (videoPath, outputDir) => {
  return new Promise(async (resolve, reject) => {
    console.log(`–ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ –¥–ª—è: ${videoPath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Python-—Å–∫—Ä–∏–ø—Ç–∞
    try {
      await fs.access('backend/extract_scene_midframes.py');
    } catch (error) {
      reject(new Error('–§–∞–π–ª backend/extract_scene_midframes.py –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      return;
    }

    const pythonBinary = process.env.PYTHON || 'python3';

    const pythonArgs = [
      'backend/extract_scene_midframes.py',
      '--video', videoPath,
      '--outdir', outputDir,
      '--threshold', '15.0',
      '--frames-per-scene', '1'
    ];
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: ${pythonBinary} ${pythonArgs.join(' ')}`);
    
    const pythonProcess = spawn(pythonBinary, pythonArgs, {
      stdio: ['ignore', 'pipe', 'pipe'],  // —á–∏—Ç–∞–µ–º stdout/stderr
    });

    let stdout = '';
    let stderr = '';

    pythonProcess.stdout.on('data', (data) => {
      stdout += data.toString();
      console.log(`Python stdout: ${data}`);
    });

    pythonProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      console.error(`Python stderr: ${data}`);
    });

    pythonProcess.on('close', (code) => {
      console.log(`Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
      console.log(`Python stdout: ${stdout}`);
      console.log(`Python stderr: ${stderr}`);

      if (code === 0) {
        resolve({ success: true, stdout, stderr });
      } else {
        const errorMsg = `Python —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}): ${stderr || stdout}`;
        console.error(errorMsg);
        reject(new Error(errorMsg));
      }
    });

    pythonProcess.on('error', (error) => {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error}`);
      console.error(`–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
      console.error(`1. Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –≤ PATH`);
      console.error(`2. –§–∞–π–ª backend/extract_scene_midframes.py –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      console.error(`3. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r backend/requirements.txt`);
      reject(error);
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–¥—Ä–æ–≤
const getFramesList = async (framesDir) => {
  try {
    const files = await fs.readdir(framesDir);
    const frameFiles = files
      .filter(file => file.startsWith('scene_') && file.endsWith('.jpg'))
      .sort();

    const frames = [];
    for (const file of frameFiles) {
      const filePath = path.join(framesDir, file);
      const stats = await fs.stat(filePath);

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      const fileBuffer = await fs.readFile(filePath);
      const base64 = fileBuffer.toString('base64');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: scene_0001_frame_01.jpg
      const match = file.match(/scene_(\d+)_frame_(\d+)\.jpg/);
      const sceneNumber = match ? parseInt(match[1]) : 0;
      const frameNumber = match ? parseInt(match[2]) : 0;

      frames.push({
        id: frames.length + 1,
        filename: file,
        thumbnail: `data:image/jpeg;base64,${base64}`,
        timestamp: `${Math.floor(sceneNumber / 2)}:${(sceneNumber % 2) * 30}`,
        selected: false,
        sceneNumber: sceneNumber,
        frameNumber: frameNumber
      });
    }

    return frames;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: ${error}`);
    return [];
  }
};

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
app.post('/api/upload', upload.single('video'), async (req, res) => {
  console.log('üì§ –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/upload');
  console.log('üìÅ –§–∞–π–ª:', req.file);
  
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const videoPath = req.file.path;
    const videoId = path.basename(videoPath, path.extname(videoPath));
    const framesDir = path.join('frames', videoId);

    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: ${videoPath}`);
    console.log(`–ü–∞–ø–∫–∞ –¥–ª—è –∫–∞–¥—Ä–æ–≤: ${framesDir}`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–¥—Ä–æ–≤
    await fs.mkdir(framesDir, { recursive: true });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
    await extractFrames(videoPath, framesDir);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
    const frames = await getFramesList(framesDir);

    res.json({
      success: true,
      videoId: videoId,
      frames: frames,
      message: `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${frames.length} –∫–∞–¥—Ä–æ–≤`
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ', 
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –ø–æ videoId
app.get('/api/frames/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const framesDir = path.join('frames', videoId);

    console.log(`–ó–∞–ø—Ä–æ—Å –∫–∞–¥—Ä–æ–≤ –¥–ª—è videoId: ${videoId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    try {
      await fs.access(framesDir);
    } catch (error) {
      return res.status(404).json({ error: '–ö–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–¥—Ä–æ–≤
    const frames = await getFramesList(framesDir);

    res.json({
      success: true,
      videoId: videoId,
      frames: frames
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤', 
      details: error.message 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  await ensureDirectories();
  
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: uploads/`);
    console.log(`üñºÔ∏è –ü–∞–ø–∫–∞ –∫–∞–¥—Ä–æ–≤: frames/`);
    console.log(`üêç Python —Å–∫—Ä–∏–ø—Ç: backend/extract_scene_midframes.py`);
    console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
    console.log(`   POST /api/upload - –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤`);
    console.log(`   GET  /api/frames/:videoId - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤`);
    console.log(`   GET  /api/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞`);
  });
};

startServer().catch(console.error);
